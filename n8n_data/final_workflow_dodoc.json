{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n    d.user_id AS doctor_id,\n    COALESCE(u.name, u.first_name || ' ' || COALESCE(u.second_name, '')) AS doctor_name,\n    u.rating_score AS doctor_rating,\n    d.category AS doctor_category,\n    COALESCE(dq.title, '') AS qualification,\n    COALESCE(dq.description, '') AS qualification_description,\n    COALESCE(\n        MAX(COALESCE(dwe.end_year, EXTRACT(YEAR FROM CURRENT_DATE)::integer) - dwe.start_year),\n        0\n    ) AS experience_years,\n    COALESCE(d.academic_degree, '') AS academic_degree,\n    STRING_AGG(DISTINCT s.title, ', ') AS specializations,\n    STRING_AGG(DISTINCT sv.title, ', ') AS services,\n    STRING_AGG(DISTINCT c.title, ', ') AS clinics,\n    STRING_AGG(DISTINCT COALESCE(df.file_name, ''), ', ') AS licenses,\n    STRING_AGG(DISTINCT mc.title, ', ') AS doctor_cities\nFROM \n    doctors d\nINNER JOIN \n    users u ON d.user_id = u.id AND u.is_active = true AND u.deleted_at IS NULL\nLEFT JOIN \n    doctors_qualifications dq ON d.qualification_id = dq.id\nLEFT JOIN \n    specialisation_links sl ON d.user_id = sl.doctor_id\nLEFT JOIN \n    specialisations s ON sl.specialisation_id = s.id AND s.is_visible = true AND s.deleted_at IS NULL\nLEFT JOIN \n    service_links svl ON d.user_id = svl.doctor_id AND svl.visibility = true\nLEFT JOIN \n    services sv ON svl.service_id = sv.id AND sv.is_visible = true AND sv.deleted_at IS NULL\nLEFT JOIN \n    clinic_doctors cd ON d.user_id = cd.doctor_id\nLEFT JOIN \n    clinics c ON cd.clinic_id = c.user_id AND c.is_visible = true AND c.deleted_at IS NULL\nLEFT JOIN \n    main_cities mc ON u.city_id = mc.id AND mc.is_visible = true\nLEFT JOIN \n    doctor_files df ON d.user_id = df.doctor_user_id\nLEFT JOIN \n    doctor_work_experience dwe ON d.user_id = dwe.doctor_id\nWHERE \n    d.is_visible = true \n    AND d.deleted_at IS NULL\nGROUP BY \n    d.user_id, u.name, u.first_name, u.second_name, u.rating_score, d.category, dq.title, dq.description, d.academic_degree\nORDER BY \n    u.rating_score DESC NULLS LAST, u.name;\n\n",
        "options": {
          "queryBatching": "single"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        80,
        60
      ],
      "id": "e5897960-4613-4fa9-9c29-7e8031841a10",
      "name": "PostgreSQL",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "OwGcOQcOWYOFFnxO",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-nano",
          "mode": "list",
          "cachedResultName": "gpt-4.1-nano"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1040,
        380
      ],
      "id": "65ba02f7-c092-49e3-ae12-250b663e44cd",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "7n3MZG1gOQVFa86i",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ai-agent",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -380,
        80
      ],
      "id": "50e917f1-ac82-49fa-b59f-4b5d3c8f7a21",
      "name": "Webhook",
      "webhookId": "64e62919-26c9-49f4-b127-b76f0d5a4c33"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1451e872-0b17-4423-99f8-369d1b177d64",
              "name": "chatInput",
              "value": "={{ $('Webhook').item.json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "4ce00246-d5d4-476a-8c1f-52cd9a7eab3e",
              "name": "sessionId",
              "value": "=\n{{ $('Webhook').item.json.body.sessionId }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        420,
        100
      ],
      "id": "f488ed17-60e0-40c3-b0ba-c22e26fe08da",
      "name": "Set"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }} ",
        "options": {
          "systemMessage": "={{ $json.formattedPrompt }} "
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        1140,
        120
      ],
      "id": "b8811ded-3dcb-4e73-93e3-5e468278d0a6",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "const allDoctors = $items(\"PostgreSQL\", 0).map(item => item.json);\nconst chatInput = $('Set').first().json.chatInput;\nconst sessionID = $('Set').first().json.sessionId;\n\nconst limitedDoctors = allDoctors.slice(0, 300);\nconst formattedDoctors = JSON.stringify(limitedDoctors, null, 2);\n\nconst prompt = `\nТы — умный медицинский ассистент.\n\nПользователь может искать **врачей** или **клиники**.\n\nЕсли в сообщении есть слова: **\"клиника\"**, **\"медцентр\"**, **\"медицинский центр\"** — значит, пользователь ищет КЛИНИКУ.\n\nВ этом случае проанализируй список врачей ниже, собери уникальные клиники из поля \\`clinics\\`, и верни 3–5 самых популярных клиник по количеству врачей с высоким рейтингом.\n\nФормат:\n{\n  \"matched_clinics\": [\n    {\n      \"clinic_title\": \"...\",\n      \"clinic_city\": \"...\",\n      \"average_rating\": ...\n    }\n  ]\n}\n\nЕсли в сообщении описан симптом или специальность (например, \"невролог\", \"болит спина\", \"аллергия\") — подбери МИНИМУМ 3 - МАКСИМУМ 5 врачей с релевантной специализацией и высоким рейтингом.\n\nИспользуй поля:\n- doctor_name\n- specializations\n- services\n- doctor_rating\n- doctor_city\n\nФормат:\n{\n  \"matched_doctors\": [\n    {\n      \"doctor_id\": ...,\n      \"doctor_name\": \"...\",\n      \"specializations\": [...],\n      \"services\": [...],\n      \"doctor_rating\": ...,\n      \"doctor_city\": \"...\"\n    }\n  ]\n}\n\nОБЯЗАТЕЛЬНО: Если ГОРОД или СТРАНА не указана — задай вопрос: \"В каком вы городе?\" (без JSON). Города включают в себя этот список: Туркестан, Астана, Костанай, Кызылорда, Жезказган, Атырау, Тараз, Актобе, Караганда, Алматы, Шымкент, Усть-Каменогорск, Семей, Актау, Петропавловск, Уральск, Кокшетау, Талдыкорган, Павлодар.\nЕсли указан КАЗАХСТАН или по всей стране — не спрашивай город, ищи по всей базе.\nЕсли запрос не связан с медициной — ответь обычным текстом (не JSON).\n\nЗапрос пользователя: \"${chatInput}\"\n\nСписок врачей:\n${formattedDoctors}\n`;\n\nreturn [{\n  json: {\n    sessionID,\n    chatInput,\n    formattedPrompt: prompt\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        60
      ],
      "id": "8c675981-ab32-4e01-9ab0-1e861e4d95c4",
      "name": "Code"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.sessionID }}",
        "contextWindowLength": 10
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        1320,
        400
      ],
      "id": "9e048c43-281f-4157-9d2e-2ad47edd9602",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "OwGcOQcOWYOFFnxO",
          "name": "Postgres account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "PostgreSQL": {
      "main": [
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "PostgreSQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a247d7aa-cff9-4af4-bc40-61f5956b9685",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "cb94e82bb2969d4e59601e0bcfade63809984bc5a3fa1aa618c32a33a0d6528f"
  },
  "id": "hNVrOwOoDjE9MLzU",
  "tags": []
}